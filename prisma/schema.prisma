generator client {
  provider      = "prisma-client-js"
  // Include binaries for local dev and Vercel's runtime
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  // Use binary engine to avoid Node-API library issues on serverless
  engineType    = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Make password optional for OAuth users
  role          UserRole  @default(USER)
  image         String?   // Profile image from OAuth providers
  emailVerified DateTime? // Email verification for OAuth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  votes         Vote[]
  accounts      Account[] // OAuth accounts
  sessions      Session[] // User sessions
  polls         Poll[]    @relation("PollCreator")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Poll {
  id          String   @id @default(cuid())
  title       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  options     Option[]
  votes       Vote[]
  // Track creator when available (OAuth users may not always be present)
  createdById String?
  creator     User?    @relation("PollCreator", fields: [createdById], references: [id])

  @@map("polls")
}

model Option {
  id        String   @id @default(cuid())
  text      String
  pollId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     Vote[]

  @@index([pollId], map: "options_pollId_fkey")
  @@map("options")
}

model Vote {
  id        String   @id @default(cuid())
  pollId    String
  optionId  String
  userId    String?
  sessionId String?
  ipAddress String?
  createdAt DateTime @default(now())
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([pollId, userId, sessionId, ipAddress])
  @@index([optionId], map: "votes_optionId_fkey")
  @@index([userId], map: "votes_userId_fkey")
  @@map("votes")
}

enum UserRole {
  USER
  ADMIN
}
